library(mymadrat)
a <- readSource(type="WDI")
library(mymadrat)
a <- readSource(type="WDI")
library(mymadrat)
library(madrat)
a <- readSource(type="WDI")
downloadSource(type="WDI")
downloadSource(type="WDI_t")
getCalculations("download")
library(mymadrat)
getCalculations("download")
downloadSource(type="WDI_t")
library(wbstats)
downloadSource(type="WDI_t")
downloadSource(type="WDI_t", overwrite=TRUE)
library(mymadrat)
downloadSource(type="WDI_t", overwrite=TRUE)
tmp <- readSource("WDI")
load("C:/PIK/inputdata/sources/WDI/WDI.rda")
View(wdi)
head(wdi)
library(mymadrat)
downloadSource(type="WDI_t", overwrite=TRUE)
tmp <- readSource("WDI")
library(mymadrat)
tmp <- readSource("WDI")
library(mymadrat)
library(mymadrat)
t <- readSource("WDI")
library(mymadrat)
t <- readSource("WDI")
head(wdi)
wdi <- wdi[1:3]
wdi <- as.magpie(wdi, spatial=1, temporal=2, tidy=TRUE)
library(mymadrat)
a <- downloadSource("WDI_t")
getCalculations("download")
a <- downloadSource("WDI", overwrite=T)
library(WDI)
a <- downloadSource("WDI", overwrite=T)
WDI_data <- WDI::WDI_data
WDI_data$series
WDI_data$series[,"indicator"]
library(mymadrat)
wdi
load("C:/PIK/inputdata/sources/WDI_t/WDI.rda")
library(mymadrat)
a <- downloadSource(type="WDI", overwrite=T)
a <- downloadSource(type="WDI_t", overwrite=T)
library(mymadrat)
a <- downloadSource(type="WDI_t", overwrite=T)
library(mymadrat)
rm(list=ls())
library(madrat)
library(mymadrat)
a <- readSource(type="WDI",subtype="SP.POP.TOTL")
a <- readSource(type="WDI_t",subtype="SP.POP.TOTL")
?melt
?select
library(tidyr)
?select
library(dplyr)
?select
load("C:/PIK/inputdata/sources/WDI_t/WDI.rda")
head(wdi)
select(wdi, "iso2c", "year")
?countrycode
library(countrycode)
?countrycode
head(wdi)
wdi$country <- NULL
?as.magpie
wdi <- as.magpie(wdi, spatial=1,temporal=2,tidy=TRUE,replacement =".")
fulldim(wdi)
load("C:/PIK/inputdata/sources/WDI_t/WDI.rda")
head(wdi)
wdi$country <- NULL
gather(wdi, "iso2c", "year")
head(wdi)
gather(wdi,key=c("iso2c", "year"))
(gather(wdi,key=c(iso2c, year))
)
melt(wdi,id.vars = c("iso2c","year"))
library(reshape2)
melt(wdi,id.vars = c("iso2c","year"))
library(mymadrat)
tst <- readSource("WDI_t", subtype="NY.GDP.MKTP.PP.CD")
fulldim(tst)
tmp <- readSource("WDI_t", subtype="SP.POP.TOTL", convert=F)
fulldim(tmp)
getRegions(tmp)
10e6
1e6 - 1000000
getRegions(tmp)<-countrycode(getRegions(tmp),"iso2c","iso3c")
getRegions(tmp)
fulldim(tmp)
?clean_magpie
knit("madrat_exercise.Rmd")
library(knitr)
knit("madrat_exercise.Rmd")
markdownToHTML('My_Analysis.md', 'My_Analysis.html', options=c("use_xhml"))
library(markdown)
markdownToHTML('My_Analysis.md', 'My_Analysis.html', options=c("use_xhml"))
markdownToHTML('madrat_exercise.md', 'madrat_exercise.Rmd', options=c("use_xhml"))
system("pandoc -s madrat_exercise.html -o madrat_exercise.pdf")
prices <- readSource("FAO", "PricesProducerAnnual")
library(mymadrat)
a <- calcOutput("ValidAgGDP")
library(madrat)
a <- calcOutput("ValidAgGDP")
getConfig()
getConfig(mainfolder="C:/PIK/inputdata")
getConfig(mainfolder="C:/PIK/inputdata")
setConfig(mainfolder="C:/PIK/inputdata")
a <- calcOutput("ValidAgGDP")
library(reshape2)
a <- calcOutput("ValidAgGDP")
library(countrycode)
a <- calcOutput("ValidAgGDP")
?setRegions
library(mymadrat)
a <- calcOutput("AgGDP")
getConfig()
library(mymadrat)
a <- calcOutput("AgGDP")
downloadSource("WDI", overwrite=T)
library(WDI)
downloadSource("WDI", overwrite=T)
library(mymadrat)
downloadSource("WDI", overwrite=T)
a <- calcOutput("AgGDP")
fulldim(a)
library(mymadrat)
library(mymadrat)
knit_with_parameters('C:/PIK/mymadrat/madrat_exercise.Rmd')
?knitr
prices <- readSource("FAO", "PricesProducerAnnual")
#production quantities for aggregation
CropPrim <- readSource("FAO", "Crop")[,,"production"]
livstPrim <- readSource("FAO", "LivePrim")[,,"production"]
yearsPrim <- intersect(getYears(CropPrim),getYears(livstPrim))
prod <- mbind(CropPrim[,yearsPrim,], livstPrim[,yearsPrim,])
library(moinput)
prices <- readSource("FAO", "PricesProducerAnnual")
setConfig(forcecache=T)
getConfig()
prices <- readSource("FAO", "PricesProducerAnnual")
#production quantities for aggregation
CropPrim <- readSource("FAO", "Crop")[,,"production"]
livstPrim <- readSource("FAO", "LivePrim")[,,"production"]
yearsPrim <- intersect(getYears(CropPrim),getYears(livstPrim))
prod <- mbind(CropPrim[,yearsPrim,], livstPrim[,yearsPrim,])
prod <- collapseNames(prod)
years_p <- intersect(getYears(prod),getYears(prices))
prod <- prod[,years_p,]
prices <- prices[,years_p,intersect(getNames(prices),getNames(prod))]
prod <- prod[,,intersect(getNames(prices),getNames(prod))]
#aggregate to magpie products
aggregation <- toolGetMapping("FAOitems.rda","sectoral",where="moinput")
prices <- toolAggregate(prices, rel=aggregation, from="ProductionItem",
to="k", dim=3.1, partrel = TRUE, verbosity=2, weight=prod)
#remove countries that have no price reporting at all
prices <- prices[-which(dimSums(prices,dim=c(2,3),na.rm=T)==0)]
regions <- getRegions(prices)
pop <- calcOutput("Population", aggregate=F)[,,"pop_SSP2"][regions,,]
pop <- time_interpolate(pop, interpolated_year=getYears(prices))
